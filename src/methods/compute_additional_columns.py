import copy

import numpy as np
import pint

from src.methods.PV_interface import get_PV_generated, get_max_pv_charged, get_PV_generated_from_pandas_row
from src.methods.helpers import soc2remainingCharge

ureg = pint.UnitRegistry()
def compute_additional_columns(car_data, path_to_data_folder, max_kw_per_hour):
    """
    adds the column:
    1) electricity generated by PV in kWH
    2) electricity needed by car in kWH
    3) ratio of electricity covered

    Parameters
    ----------
    car_data: pandas df
        data_PV_Solar frame containing data_PV_Solar about car movements

    Returns
    -------
    car_data_with_extra_column: pandas df
        car data_PV_Solar with columns added
    """

    car_data_copy = copy.deepcopy(car_data)

    needed_by_car = [soc2remainingCharge(car_data_copy["soc_start"][car_data_copy.index[i]]) -
                                      soc2remainingCharge(car_data_copy["soc_end"][car_data_copy.index[i]])
                                                          for i in range(len(car_data_copy.index))]
    needed_by_car = np.maximum(0, needed_by_car)
    assert (np.all(np.array(needed_by_car) >= 0))
    car_data_copy['needed_by_car'] = needed_by_car

    car_data_copy['coverage_ratio'] = car_data_copy['generated_by_pv']/car_data_copy['needed_by_car']

    charged_from_pv = [np.minimum(car_data_copy['generated_by_pv'][car_data_copy.index[i]],
                                                  car_data_copy['needed_by_car'][car_data_copy.index[i]] )
                                       for i in range(len(car_data_copy.index))]


    # exclude negative charged from PV to prevent artificial results
    # charged_from_pv = np.maximum(0, charged_from_pv)

    assert (np.all(np.array(charged_from_pv) >= 0))

    car_data_copy['charged_from_pv'] = charged_from_pv
    car_data_copy['diff'] = car_data_copy['charged_from_pv_unrestricted'] - car_data_copy['charged_from_pv']

    return car_data_copy
