import copy

import numpy as np
import pint

from jannik.methods.PV_interface import get_PV_generated
from jannik.methods.helpers import soc2remainingCharge

ureg = pint.UnitRegistry()
def compute_additional_columns(car_data):
    """
    adds the column:
    1) electricity generated by PV in MWH
    2) electricity needed by car in MWH
    3) ratio of electricity covered

    Parameters
    ----------
    car_data: pandas df
        data frame containing data about car movements

    Returns
    -------
    car_data_with_extra_column: pandas df
        car data with columns added
    """

    car_data_copy = copy.deepcopy(car_data)
    car_data_copy["generated_by_PV"] = [get_PV_generated(car_data_copy["start"][car_data_copy.index[i]],
                                                          car_data_copy["end"][car_data_copy.index[i]],
                                                          car_data_copy["vin"][car_data_copy.index[i]]
                                                          ) for i in range(len(car_data_copy.index))]

    needed_by_car = [soc2remainingCharge(car_data_copy["soc_start"][car_data_copy.index[i]]) -
                                      soc2remainingCharge(car_data_copy["soc_end"][car_data_copy.index[i]])
                                                          for i in range(len(car_data_copy.index))]
    needed_by_car = np.maximum(0, needed_by_car)
    assert (np.all(np.array(needed_by_car) >= 0))
    car_data_copy['needed_by_car'] = needed_by_car
    #car_data_copy['needed_by_car'] = [soc2remainingCharge(car_data_copy["soc_start"][car_data_copy.index[i]]) -
    #                                  soc2remainingCharge(car_data_copy["soc_end"][car_data_copy.index[i]])
    #                                                      for i in range(len(car_data_copy.index))]


    car_data_copy['coverage_ratio'] = [car_data_copy['generated_by_PV'][car_data_copy.index[i]] /
                                       car_data_copy['needed_by_car'][car_data_copy.index[i]]
                                       for i in range(len(car_data_copy.index))]

    charged_from_pv = [np.minimum(car_data_copy['generated_by_PV'][car_data_copy.index[i]] ,
                                                  car_data_copy['needed_by_car'][car_data_copy.index[i]] )
                                       for i in range(len(car_data_copy.index))]

    # exclude negative charged from PV to prevent artificial results
    charged_from_pv = np.maximum(0, charged_from_pv)
    print(f"charged_from_pv: {charged_from_pv}")
    assert (np.all(np.array(charged_from_pv) >= 0))
    #car_data_copy['charged_from_PV'] = [np.minimum(car_data_copy['generated_by_PV'][car_data_copy.index[i]] ,
    #                                              car_data_copy['needed_by_car'][car_data_copy.index[i]] )
    #                                   for i in range(len(car_data_copy.index))]
    car_data_copy['charged_from_PV'] = charged_from_pv


    return car_data_copy
