import datetime
import os
import pandas as pd

import pint

from jannik.methods.helpers import get_user_id
from jannik.pvmodel2.pv_swissbuildings_json import PVModel

ureg = pint.UnitRegistry()

import numpy as np

# TODO
pv_efficency = 0.18
#pv_efficency = 180


pv_cache = {}


def get_PV_generated_old(start, end, house_ID):
    """
    interface to house model, fetches generated PV energy by the house from start to end.

    Parameters
    ----------
    start: timestamp
        starting time of query
    end: timestamp
        end time of query
    house_ID: string
        which house is to be queried

    Returns
    -------
    generated_energy: float
        energy that was generated by the house
    """

    """
    #start = datetime.datetime.strptime(start, '%Y-%m-%d %H:%M:%S.%f')
    start = datetime.datetime.strptime(start, '%m/%d/Y H:M')
    end = datetime.datetime.strptime(end, '%m/%d/Y H:M')
    start_hour = start.dt.hour
    end_hour = end.dt.hour
    """

    #print(start +" "+ end+" " + house_ID)
    #print(end)


    start_datetime = datetime.datetime.strptime(str(start), "%Y-%m-%d %H:%M:%S")
    end_datetime = datetime.datetime.strptime(str(end), "%Y-%m-%d %H:%M:%S")

    if house_ID not in pv_cache:
        user_id = get_user_id(house_ID)
        fpath = os.path.join("..", "..", "..", "..","..","Users","hamperj","private","pvmobility", "pv_mobility_out", f"{user_id}")


        #fpath = os.path.join("..", "..", "pvmobility", "pv_mobility_out", f"{1595}")
        #print(os.path.abspath(fpath))
        pv = PVModel(fpath)
        pv_cache[house_ID] = pv


    generated_energy =  pv_cache[house_ID].get_solar_radiation(start_datetime, end_datetime) * pv_efficency #in Wh

    #print(pv.get_solar_radiation(datetime.datetime(2017, 1, 17, 18, 31),
    #                             datetime.datetime(2017, 1, 20, 12, 57)) * pv_efficency)
    #print(generated_energy)

    #a = 5/0

    #print(generated_energy)

    generated_KWh = generated_energy / 1000
    return generated_KWh

def get_PV_generated(start, end, house_ID):
    #print("get_PV_generated is called")
    #print(house_ID)
    #if house_ID != "00000dcb1a3963f3ae1d91cd9755b2d0":
    #    return 3
    if house_ID not in pv_cache:
        user_id = get_user_id(house_ID)
        #fpath = os.path.join("..", "..", "..", "..","..","Users","hamperj","private","pvmobility", "pv_mobility_out", f"{user_id}")


        #fpath = os.path.join("..", "..", "pvmobility", "pv_mobility_out", f"{1595}")
        #print(os.path.abspath(fpath))
        pv = PVModel(str(user_id))
        pv_cache[house_ID] = pv
        print(pv_cache)

    user_id = get_user_id(house_ID)
    #print(str(user_id))
    #pv= PVModel("1761")
    #pv = PVModel(str(user_id))
    pv = pv_cache[house_ID]
    start_datetime = datetime.datetime.strptime(str(start), "%Y-%m-%d %H:%M:%S")
    end_datetime = datetime.datetime.strptime(str(end), "%Y-%m-%d %H:%M:%S")
    generated_energy = pv.get_solar_radiation("PVMODEL_SPV170",
                             start_datetime,
                             end_datetime)
    generated_KWh = generated_energy / 1000
    #print(generated_KWh)
    return generated_KWh

